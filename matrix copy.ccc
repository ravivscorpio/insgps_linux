#include "matrix.h"

using namespace std;
Matrix::Matrix()
{
        this->row=3;
        this->column=3;

        A=(double*) new double[9];
        for (int i=0;i<9;i++)
                A[i]=0;

    
}

Matrix::Matrix(int row,int column,double val)
{
        this->row=row;
        this->column=column;
        A=(double*) new double[row*column];
        for (int i=0;i<row*column;i++)
                A[i]=val;
   
}

Matrix::~Matrix()
{
        delete A;
}

void Matrix::showmat(){
        cout.precision(2);
	if(this->row>0&&this->column>0){
		int k=0;
		cout<<"[";
		for(int i=0;i<this->row;i++){
			for (int j=0;j<this->column;j++){
				if(j<this->column){
					cout<<A[k++]<<"  ";
				}else{
					cout<<A[k++];
				}
			}
			if(i<this->row){
				cout<<"]\n";
			}else{
				cout<<"]\n";
			}
		}	
		cout<<"\n";
	}else{
		cout<<"[]";
	}
}

void Matrix::mat_set(int row,int column,double val){
        A[row*this->column+column]=val;

}

double Matrix::mat_get(int row,int column){
        return A[row*this->column+column];

}
void Matrix::I(){
        for (int i=0;i<((this->column)*(this->row));i++)
                if ((i%this->row)==(i/this->column))
                        A[i]=1;

        

}
bool Matrix::mat_mat(Matrix& mat_o,const Matrix& mat_a,const Matrix& mat_b)
{
    int i=i,j,k;

    double c=0;

    for(k=0;k<3;k++)
    {
            for(j=0;j<3;j++)
            {
                    c=0;
                    for(i=0;i<3;i++)
                    {
                            c=c+mat_a.M[j][i]*mat_b.M[i][k];
                    }
            mat_o.M[j][k]=c;

            }
    }
            return true;
}


 bool  Matrix::mat_vec(Matrix& vec,const Matrix& mat)
{
    int i=i,j;
    double b=0;
    
    for(j=0;j<3;j++)
    {
            b=0;
            for(i=0;i<3;i++)
            {
                    b=b+mat.M[j][i]*mat.V[i];
            }
            vec.V[j]=b;
    }

        return true;
}


void Matrix::mat_scalar(Matrix& mat_o, const Matrix& mat,const double& x)
{
        int i,j;
        



     for(i=0;i<3;i++)
     {
          for(j=0;j<3;j++)
          {
              mat_o.M[i][j]=mat.M[i][j]*x;

          }
     }

        

}

void Matrix::vec_scalar(Matrix& vec_o, const Matrix& vec,const double& x)
{
        int i;
        



     for(i=0;i<3;i++)
     {

        vec_o.V[i]=vec.V[i]*x;

     }

        

}
void Matrix::mat_t(Matrix& mat_o, const Matrix& mat)
{
        int i,j;
        for(j=0;j<3;j++)
        {
                for(i=0;i<3;i++)
                {
                        if (i!=j)
                        {
                                mat_o.M[i][j]=mat.M[j][i];
                        }

                }
        }
}



void Matrix::mat_skew(Matrix& mat,const  double& x, const double& y,const double& z)
{


    mat.M[0][0]=1;
    mat.M[0][1]=z;
    mat.M[0][2]=-y;
    mat.M[1][0]=-z;
    mat.M[1][1]=1;
    mat.M[1][2]=x;
    mat.M[2][0]=y;
    mat.M[2][1]=-x;
    mat.M[2][2]=1;
    
}

void Matrix::mat_inv_GJ(Matrix& mat_o,const Matrix& mat,int n)
{

double a[10][10];
int k,i,j;
double ratio;
                 for(i=0;i<n;i++)
                 {
                          for(j=0;j<n;j++)
                          {

                                   a[i][j]=mat.M[i][j];
                          }
                 }
                 /* Augmenting Identity Matrix of Order n */
                 for(i=0;i<n;i++)
                 {
                          for(j=0;j<n;j++)
                          {
                                   if(i==j)
                                   {
                                        a[i][j+n] = 1;
                                   }
                                   else
                                   {
                                        a[i][j+n] = 0;
                                   }
                          }
                 }
                 /* Applying Gauss Jordan Elimination */
                 for(i=0;i<=n;i++)
                 {
                          if(a[i][i] == 0.0)
                          {
//error
                          }
                          for(j=0;j<n;j++)
                          {
                                   if(i!=j)
                                   {
                                            ratio = a[j][i]/a[i][i];
                                            for(k=1;k<=2*n;k++)
                                            {
                                                a[j][k] = a[j][k] - ratio*a[i][k];
                                            }
                                   }
                          }
                 }
                 /* Row Operation to Make Principal Diagonal to 1 */
                 for(i=0;i<n;i++)
                 {
                          for(j=n;j<2*n;j++)
                          {
                                a[i][j] = a[i][j]/a[i][i];
                          }
                 }
                 /* Displaying Inverse Matrix */

                 for(i=1;i<n;i++)
                 {
                          for(j=n;j<2*n;j++)
                          {
                                mat_o.M[i][j]=a[i][j];
                          }

                 }

}
void Matrix::mat_add_mat(Matrix& mat_o,const Matrix& mat_a,const Matrix& mat_b)
{
int i=i,j;

double c=0;


        for(j=0;j<3;j++)
        {
                c=0;
                for(i=0;i<3;i++)
                {
                        mat_o.M[i][j]=mat_a.M[i][j]+mat_b.M[i][j];
                }

        }


}
void Matrix::mat_scalar(Matrix & mat_o,Matrix& mat, double & x)
{
        int i,j;
        



     for(i=0;i<3;i++)
     {
          for(j=0;j<3;j++)
          {
              mat_o.M[i][j]=mat.M[i][j]*x;

          }
     }

        

}

void Matrix::mat_det(double & det, const Matrix& mat)
{
        det=mat.M[0][0]*mat.M[1][1]*mat.M[2][2]+mat.M[0][1]*mat.M[1][2]*mat.M[2][0]+mat.M[0][2]*mat.M[1][0]*mat.M[2][1]-mat.M[0][0]*mat.M[1][2]*mat.M[2][1]-mat.M[0][1]*mat.M[1][0]*mat.M[2][2]-mat.M[0][2]*mat.M[1][1]*mat.M[2][0];

}
void Matrix::mat_det2(double & det, const Matrix& mat,int row,int col)
{
        switch (row)
        {
                
        }
}